<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gloryer.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gloryer.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-04T22:20:40+00:00</updated><id>https://gloryer.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">A Technical Look into Flotera Ransomware</title><link href="https://gloryer.github.io/blog/2021/flotera/" rel="alternate" type="text/html" title="A Technical Look into Flotera Ransomware"/><published>2021-05-28T00:00:00+00:00</published><updated>2021-05-28T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2021/flotera</id><content type="html" xml:base="https://gloryer.github.io/blog/2021/flotera/"><![CDATA[]]></content><author><name></name></author><category term="malware-analysis"/><category term="reverse-engineering"/><summary type="html"><![CDATA[Ransomware has been wreaking havoc since the mid-2000s. Improved ransomware variants continue to be seen since then, often with devastating results. This report will cover one of the samples of Flotera, which was available through HybridAnalysis. We present the static and dynamic behavior analysis of the Flotera ransomware.]]></summary></entry><entry><title type="html">An Analysis of the Recent Ransomware Families</title><link href="https://gloryer.github.io/blog/2021/ransom/" rel="alternate" type="text/html" title="An Analysis of the Recent Ransomware Families"/><published>2021-05-06T00:00:00+00:00</published><updated>2021-05-06T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2021/ransom</id><content type="html" xml:base="https://gloryer.github.io/blog/2021/ransom/"><![CDATA[]]></content><author><name></name></author><category term="malware-analysis"/><summary type="html"><![CDATA[The notorious crypto-ransomware infections in the past, such as CryptoLocker and WannaCry, can immediately disrupt the access to files or systems after ransomware deployment. With no backups of the compromised systems, the victim has no choice but to pay the ransom and hope the attackers will restore the systems. Additionally, the threat actors pressure victims to pay the ransom demand by stealing the data and threatening to release the stolen data publicly. In the last year, ransomware is still the major malware threat, with 60% of managed service providers seeing attacks in the first half of 2020. The ransomware industry has continued to evolve with more sophisticated new ransomware families and more effective threat actors. We investigate the three most active ransomware families reported by Groupâ€“IB in 2020 (Maze, REvil and Ryuk). They stand out to other ransomware families with massive impact by leveraging sophisticated techniques. It is important to recognize the extensive analysis that has been done on these ransomware families by the security companies. Although each ransomware has different source codes, they show some common behaviors when they strike. We summary the behavioral patterns of the chosen ransomware families and present the characteristics of each ransomware family.]]></summary></entry><entry><title type="html">Implementation and Design of Modbus over QUIC Protocol for ICS Networks</title><link href="https://gloryer.github.io/blog/2021/redirect/" rel="alternate" type="text/html" title="Implementation and Design of Modbus over QUIC Protocol for ICS Networks"/><published>2021-05-01T00:00:00+00:00</published><updated>2021-05-01T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2021/redirect</id><content type="html" xml:base="https://gloryer.github.io/blog/2021/redirect/"><![CDATA[]]></content><author><name></name></author><category term="networking"/><summary type="html"><![CDATA[We designed and implemented a full-blown Modbus protocol running over QUIC. QUIC transport eliminates the head-of-line blocking issues inherent with TCP and provides lower-latency connection establishment than TCP/TLS. Our implementation is based on pymodbus and aioquic. We evaluated the connection latency for QUIC and TCP/TLS on a mininet virtual network, where we can easily change the network conditions (delay, percentages of packet loss).]]></summary></entry><entry><title type="html">Is JWT token really secure?</title><link href="https://gloryer.github.io/blog/2019/jwt/" rel="alternate" type="text/html" title="Is JWT token really secure?"/><published>2019-10-06T00:00:00+00:00</published><updated>2019-10-06T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2019/jwt</id><content type="html" xml:base="https://gloryer.github.io/blog/2019/jwt/"><![CDATA[]]></content><author><name></name></author><category term="OAuth-2.0"/><summary type="html"><![CDATA[If you are familiar with OAuth 2.0, you probaly have heard of json web token many times (jwt token). In general, the access token in OAuth 2.0 protocol can have different formats and be protected by different crypotographic primitives. In this blog post, we will only discuss the jwt token in depth. JWT token is popular because it is powerful and authenticated. You can specify any assertions when creating the token to make it more expressive. The token is signed by the issuer (mostly not encrpted) so that no one can forge an token if he or she does not have the secret key. Sounds so far so good right? Until recently, I read some interesting attacks on the JWT token. So I decide to write a blog post about it. It is particulaly important to be aware of these attacks so that you can choose a secure implementatiion of jwt token library or if you want to implement secure jwt token from scratch. Let's dive in!]]></summary></entry><entry><title type="html">Understanding Linux Random Number Generator</title><link href="https://gloryer.github.io/blog/2019/linux/" rel="alternate" type="text/html" title="Understanding Linux Random Number Generator"/><published>2019-04-04T00:00:00+00:00</published><updated>2019-04-04T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2019/linux</id><content type="html" xml:base="https://gloryer.github.io/blog/2019/linux/"><![CDATA[]]></content><author><name></name></author><category term="Cryptography-implementations"/><summary type="html"><![CDATA[The Linux random number generator (LRNG) produces random data for many security related applications and protocols. The generator is part of the Linux kernel open source project which has different versions since the original one. The survey describes the generator of Linux kernel version 2.6.30.7. The study provides a comprehensive analysis of all functions in LRNG as well as a security analysis against cryptographic attacks.]]></summary></entry><entry><title type="html">A survey on security analysis of OAuth 2.0 framework</title><link href="https://gloryer.github.io/blog/2019/oauth/" rel="alternate" type="text/html" title="A survey on security analysis of OAuth 2.0 framework"/><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://gloryer.github.io/blog/2019/oauth</id><content type="html" xml:base="https://gloryer.github.io/blog/2019/oauth/"><![CDATA[]]></content><author><name></name></author><category term="OAuth-2.0"/><summary type="html"><![CDATA[The OAuth 2.0 protocol is one of the most widely deployed authorization protocols. The authorization is the process for granting approval to an entity to access a resource. The authorization task itself can be described as granting access to a requesting client, for a resource hosted on the resource server (RS). This exchange is mediated by the authorization server (AS). Popular social networks such as Facebook, Google implement OAuth 2.0, allowing users to delegate access to specific functions to the third party (client). For example, Google (AS) uses OAuth to allow the email application (client) to add entries into users calendar on her behalf. It also allows a user to log in to a third-party application using her identity managed by an AS. Authorization and SSO solutions have found widespread adoption in the web over last years, with OAuth 2.0 being one of the most popular frameworks. This article contains the following components: (1) Introduction of OAuth 2.0 framework in technical details. (2) Presentation of significant attacks found in the protocol itself and in the implementation. (3)Description of implementation decisions that trade security for simplicity. (4) Providing Simple and practical fix against the aforementioned attacks. Some simple and practical recommendations will also be very helpful to mitigate attacks on extensions of OAuth 2.0. For example, some fixes would also be applicable to improve the security of OAuth based access control in the constrained environment (i.e.IoT).]]></summary></entry></feed>